// -*- C++ -*-
//
// Package:    
// Class:      
// 
/**\class 

 Description: [one line class summary]

 Implementation:
     [Notes on implementation]
*/
//
// Original Author:  Cesare Calabria
//         Created:  Mon Sep  5 00:41:24 CEST 2011
// $Id$
//
//


// system include files
#include <memory>
#include <map>
#include <string>
#include <cmath>
#include <vector>
// user include files
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/EDProducer.h"

#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"

#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include "DataFormats/Common/interface/Handle.h"
#include "DataFormats/Common/interface/View.h"
#include "CommonTools/UtilAlgos/interface/TFileService.h"
#include "SimDataFormats/GeneratorProducts/interface/HepMCProduct.h"
#include "SimDataFormats/GeneratorProducts/interface/GenEventInfoProduct.h"
#include "SimDataFormats/GeneratorProducts/interface/GenRunInfoProduct.h"
#include "DataFormats/HepMCCandidate/interface/GenParticle.h"
#include "DataFormats/PatCandidates/interface/Electron.h"

using namespace reco;

//
// class declaration
//

class MCTruth : public edm::EDProducer {
   public:
      explicit MCTruth(const edm::ParameterSet&);
      ~MCTruth();

      static void fillDescriptions(edm::ConfigurationDescriptions& descriptions);

   private:
      virtual void beginJob() ;
      virtual void produce(edm::Event&, const edm::EventSetup&);
      virtual void endJob() ;
      
      virtual void beginRun(edm::Run&, edm::EventSetup const&);
      virtual void endRun(edm::Run&, edm::EventSetup const&);
      virtual void beginLuminosityBlock(edm::LuminosityBlock&, edm::EventSetup const&);
      virtual void endLuminosityBlock(edm::LuminosityBlock&, edm::EventSetup const&);

      // ----------member data ---------------------------

      edm::InputTag genParticleSrc_;
      edm::InputTag eleSrc_;
  //std::vector<reco::Electron>;
  //reco::ElectronCollection;
  //reco::GenParticleCollection;
  //typedef std::vector<reco::Electron>;
  //double deltaR_;
  //  int idEle_;
  //  int idMother_;


};

//
// constants, enums and typedefs
//


//
// static data member definitions
//

//
// constructors and destructor
//
MCTruth::MCTruth(const edm::ParameterSet& iConfig):
  genParticleSrc_(iConfig.getUntrackedParameter<edm::InputTag>("genParticles")),
  eleSrc_(iConfig.getUntrackedParameter<edm::InputTag>("electrons"))
  //idEle_(iConfig.getUntrackedParameter<double>("idEle")),
  //idMother_(iConfig.getUntrackedParameter<double>("idMother")),
  //deltaR_(iConfig.getUntrackedParameter<double>("deltaR"))
{
   //register your products

  produces<pat::ElectronCollection>( "EleGenMatch" ).setBranchAlias( "EleGenMatch");
}


MCTruth::~MCTruth()
{
 
   // do anything here that needs to be done at desctruction time
   // (e.g. close files, deallocate resources etc.)

}


//
// member functions
//

// ------------ method called to produce the data  ------------
void
MCTruth::produce(edm::Event& iEvent, const edm::EventSetup& iSetup)
{
   using namespace edm;
    using namespace std;
    
  bool matchEle = false;
  std::vector<int> momPdgId;
  
  edm::Handle<reco::GenParticleCollection> genParticles;
  iEvent.getByLabel(genParticleSrc_, genParticles);
  
  std::auto_ptr<pat::ElectronCollection> EleGenMatch(new pat::ElectronCollection);
  
  
  edm::Handle<edm::View<pat::Electron> > electrons;
  iEvent.getByLabel(eleSrc_,electrons);

 for(edm::View<pat::Electron>::const_iterator electron=electrons->begin(); electron!=electrons->end(); ++electron){
    double phiReco = electron->phi();
    double etaReco = electron->eta();
    int chargeReco =electron->charge();
   
    ////----------Provo a fare un loop sulle genParticle senza const iterator----------------------------------
    /*for(size_t i = 0; i < genParticles->size(); ++ i) {
     const GenParticle & p = (*genParticles)[i];
     int id = p.pdgId();
     int st = p.status();  
     //const Candidate * mom = p.mother();
     //if (mom){momPdgId[i]  = mom->pdgId();}
     int idmom=p.mother()->pdgId();
     double pt = p.pt(), eta = p.eta(), phi = p.phi(), mass = p.mass();
     double vx = p.vx(), vy = p.vy(), vz = p.vz();
     int charge = p.charge();
     int n = p.numberOfDaughters();}*/

    if(genParticles.isValid()){

	for(reco::GenParticleCollection::const_iterator it = genParticles->begin(); it != genParticles->end(); ++it ){
	  
	  int id = it->pdgId();
	  int status =it->status();
      	  //int Mother1Id = 0;
	  //int Mother1Id= it->mother(0)->pdgId();
          //int Mother2Id = it->mother(1)->pdgId();
	  int chargeGen=it->charge();
	  double phiGen =it->phi();
	  double etaGen=it->eta();
	  //if (it->refVector().isValid()) {
	  // int  mom_id = it->genParticleRef()->mother()->pdgId();}
	  //const  Candidate *  mom = it->mother();
	  //if (mom){momPdgId[it]  = mom->pdgId();}
	  //int momId =  mom->pdgId();
	  if (TMath::Abs(id)==11 && status==1 && chargeReco==chargeGen){
	    		
		 std::cout<<"id="<<id<<"status="<<status<<std::endl; 
		 double dR = deltaR(etaGen, phiGen, etaReco, phiReco);
     		  if(dR<=0.1) {
		    
		    matchEle = true;
		    //std::cout<<"id="<<id<<"status="<<status<<"deltaR = "<<dR<<std::endl;
		  }
		  }
	  
	else matchEle = false;


	//if(matchEle) EleGenMatch->push_back(*it);

	  }//fine for genParticle

	

	  }//fine is.valid   */
    if(matchEle) EleGenMatch->push_back(*electron);

    }//fine for recoEle
 iEvent.put(EleGenMatch, "EleGenMatch");
}
 


// ------------ method called once each job just before starting event loop  ------------
void 
MCTruth::beginJob()
{
}

// ------------ method called once each job just after ending the event loop  ------------
void 
MCTruth::endJob() {
}

// ------------ method called when starting to processes a run  ------------
void 
MCTruth::beginRun(edm::Run&, edm::EventSetup const&)
{
}

// ------------ method called when ending the processing of a run  ------------
void 
MCTruth::endRun(edm::Run&, edm::EventSetup const&)
{
}

// ------------ method called when starting to processes a luminosity block  ------------
void 
MCTruth::beginLuminosityBlock(edm::LuminosityBlock&, edm::EventSetup const&)
{
}

// ------------ method called when ending the processing of a luminosity block  ------------
void 
MCTruth::endLuminosityBlock(edm::LuminosityBlock&, edm::EventSetup const&)
{
}

// ------------ method fills 'descriptions' with the allowed parameters for the module  ------------
void
MCTruth::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {
  //The following says we do not know what parameters are allowed so do no validation
  // Please change this to state exactly what you do use, even if it is no parameters
  edm::ParameterSetDescription desc;
  desc.setUnknown();
  descriptions.addDefault(desc);
}

//define this as a plug-in
DEFINE_FWK_MODULE(MCTruth);
