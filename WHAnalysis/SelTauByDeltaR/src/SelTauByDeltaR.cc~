// -*- C++ -*-
//
// Package:    SelTauByDeltaR
// Class:      SelTauByDeltaR
// 
/**\class SelTauByDeltaR SelTauByDeltaR.cc WHAnalysis/SelTauByDeltaR/src/SelTauByDeltaR.cc

 Description: [one line class summary]

 Implementation:
     [Notes on implementation]
*/
//
// Original Author:  Cesare Calabria
//         Created:  Mon Sep  5 00:41:24 CEST 2011
// $Id$
//
//


// system include files
#include <memory>
#include <map>
#include <string>
#include <cmath>

// user include files
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/EDProducer.h"

#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"

#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include "DataFormats/Common/interface/Handle.h"
#include "DataFormats/Common/interface/View.h"
#include "CommonTools/UtilAlgos/interface/TFileService.h"
#include "DataFormats/PatCandidates/interface/Jet.h"
#include "DataFormats/PatCandidates/interface/Muon.h"
#include "DataFormats/PatCandidates/interface/Electron.h"
#include "DataFormats/PatCandidates/interface/Jet.h"
#include "DataFormats/PatCandidates/interface/Tau.h"
#include "DataFormats/JetReco/interface/PFJet.h"
#include "DataFormats/JetReco/interface/PFJetCollection.h"
#include "DataFormats/Math/interface/deltaR.h"

//
// class declaration
//

class SelTauByDeltaR : public edm::EDProducer {
   public:
      explicit SelTauByDeltaR(const edm::ParameterSet&);
      ~SelTauByDeltaR();

      static void fillDescriptions(edm::ConfigurationDescriptions& descriptions);

   private:
      virtual void beginJob() ;
      virtual void produce(edm::Event&, const edm::EventSetup&);
      virtual void endJob() ;
                       
      virtual void beginRun(edm::Run&, edm::EventSetup const&);
      virtual void endRun(edm::Run&, edm::EventSetup const&);
      virtual void beginLuminosityBlock(edm::LuminosityBlock&, edm::EventSetup const&);
      virtual void endLuminosityBlock(edm::LuminosityBlock&, edm::EventSetup const&);

      // ----------member data ---------------------------

      
  edm::InputTag tauSrc_;
  edm::InputTag muonSrc_;
  edm::InputTag eleSrc_;

};

//
// constants, enums and typedefs
//


//
// static data member definitions
//

//
// constructors and destructor
//
SelTauByDeltaR::SelTauByDeltaR(const edm::ParameterSet& iConfig):
  tauSrc_(iConfig.getUntrackedParameter<edm::InputTag>("tauSrc")),
  muonSrc_(iConfig.getUntrackedParameter<edm::InputTag>("muonSrc")),
  eleSrc_(iConfig.getUntrackedParameter<edm::InputTag>("eleSrc"))

{
   //register your products
/* Examples
   produces<ExampleData2>();

   //if do put with a label
   produces<ExampleData2>("label");
 
   //if you want to put into the Run
   produces<ExampleData2,InRun>();
*/
   //now do what ever other initialization is needed

  produces<pat::TauCollection>( "TauSelByDeltaR" ).setBranchAlias("TauSelByDeltaR");
}


SelTauByDeltaR::~SelTauByDeltaR()
{
 
   // do anything here that needs to be done at desctruction time
   // (e.g. close files, deallocate resources etc.)

}


//
// member functions
//

// ------------ method called to produce the data  ------------
void
SelTauByDeltaR::produce(edm::Event& iEvent, const edm::EventSetup& iSetup)
{
   using namespace edm;
/* This is an event example
   //Read 'ExampleData' from the Event
   Handle<ExampleData> pIn;
   iEvent.getByLabel("example",pIn);

   //Use the ExampleData to create an ExampleData2 which 
   // is put into the Event
   std::auto_ptr<ExampleData2> pOut(new ExampleData2(*pIn));
   iEvent.put(pOut);
*/

/* this is an EventSetup example
   //Read SetupData from the SetupRecord in the EventSetup
   ESHandle<SetupData> pSetup;
   iSetup.get<SetupRecord>().get(pSetup);
*/

  bool eleResult = false;
  bool muResult =false;
   edm::Handle<edm::View<pat::Tau> > taus;
   iEvent.getByLabel(tauSrc_,taus);
  
   edm::Handle<edm::View<pat::Electron> > electrons;
   iEvent.getByLabel(eleSrc_,electrons);

  edm::Handle<edm::View<pat::Muon> > muons;
  iEvent.getByLabel(muonSrc_,muons);


  std::auto_ptr<pat::TauCollection> TauSelByDeltaR(new pat::TauCollection);

for(edm::View<pat::Tau>::const_iterator tau=taus->begin(); tau!=taus->end(); ++tau){
  double etaTau=tau->eta();
  double phiTau=tau->phi();
  
 
 for(edm::View<pat::Electron>::const_iterator electron=electrons->begin(); electron!=electrons->end(); ++electron){
   double etaEle=electron->eta();
   double phiEle=electron->phi();
   double deltaR_EleTau =deltaR(etaTau, phiTau,etaEle,phiEle );
   //if (deltaR_EleTau<0.1)std::cout<<"deltaR_EleTau="<<deltaR_EleTau<<std::endl;
   if (deltaR_EleTau>0.1) {
     eleResult=true;
   }
   else {
     eleResult=false;
   }
   //if (eleResult) TauSelByDeltaR->push_back(*tau);
   //std::cout<<"deltaR_EleTau="<<deltaR_EleTau<<std::endl;
 }//fine loop elettroni
   
for(edm::View<pat::Muon>::const_iterator muon=muons->begin(); muon!=muons->end(); ++muon){
   double etaMu=muon->eta();
   double phiMu=muon->phi();
   double deltaR_MuTau =deltaR(etaTau, phiTau,etaMu,phiMu );
   if (deltaR_MuTau>0.1){
     muResult=true;
     std::cout<<"deltaR_MuTau="<<deltaR_MuTau<<std::endl;
   }
   else{
      muResult=false;
   }
   //std::cout<<"deltaR_MuTau="<<deltaR_MuTau<<std::endl;
   if ((eleResult=true) &&(muResult=true)) TauSelByDeltaR->push_back(*tau); 
 }//fine loop sui muoni
//if ((eleResult=true) &&(muResult=true)) TauSelByDeltaR->push_back(*tau);
//if (eleResult && muResult) TauSelByDeltaR->push_back(*tau);
 
 
 }//fine loop tau

iEvent.put(TauSelByDeltaR, "TauSelByDeltaR");
 
}

// ------------ method called once each job just before starting event loop  ------------
void 
SelTauByDeltaR::beginJob()
{
}

// ------------ method called once each job just after ending the event loop  ------------
void 
SelTauByDeltaR::endJob() {
}

// ------------ method called when starting to processes a run  ------------
void 
SelTauByDeltaR::beginRun(edm::Run&, edm::EventSetup const&)
{
}

// ------------ method called when ending the processing of a run  ------------
void 
SelTauByDeltaR::endRun(edm::Run&, edm::EventSetup const&)
{
}

// ------------ method called when starting to processes a luminosity block  ------------
void 
SelTauByDeltaR::beginLuminosityBlock(edm::LuminosityBlock&, edm::EventSetup const&)
{
}

// ------------ method called when ending the processing of a luminosity block  ------------
void 
SelTauByDeltaR::endLuminosityBlock(edm::LuminosityBlock&, edm::EventSetup const&)
{
}

// ------------ method fills 'descriptions' with the allowed parameters for the module  ------------
void
SelTauByDeltaR::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {
  //The following says we do not know what parameters are allowed so do no validation
  // Please change this to state exactly what you do use, even if it is no parameters
  edm::ParameterSetDescription desc;
  desc.setUnknown();
  descriptions.addDefault(desc);
}

//define this as a plug-in
DEFINE_FWK_MODULE(SelTauByDeltaR);
